{-# OPTIONS --safe #-}

module Scwf.DomainScwf.PlainInstance where

open import Appmap.Equivalence
open import Base.Core
open import Scwf.Plain
open import Scwf.DomainScwf.Appmap.Definition
open import Scwf.DomainScwf.Appmap.Composition.Instance
open import Scwf.DomainScwf.Appmap.Empty.Instance
open import Scwf.DomainScwf.Appmap.Identity.Instance
open import Scwf.DomainScwf.Comprehension.Morphism.Instance
open import Scwf.DomainScwf.Comprehension.p.Instance
open import Scwf.DomainScwf.Comprehension.q.Instance
open import Scwf.DomainScwf.PlainAxiomProofs

domScwf : Scwf
Scwf.Ty domScwf       = Ty
Scwf.Ctx domScwf      = Ctx
Scwf.Tm domScwf Œì ùê¥   = tAppmap Œì [ ùê¥ ]
Scwf.Sub domScwf      = tAppmap
Scwf._‚âà_ domScwf      = _‚âà_
Scwf._‚âä_ domScwf      = _‚âà_
Scwf.isEquivT domScwf = ‚âàIsEquiv
Scwf.isEquivS domScwf = ‚âàIsEquiv
Scwf.‚óá domScwf        = []
Scwf._‚Ä¢_ domScwf Œì ùê¥  = ùê¥ :: Œì
Scwf.q domScwf        = q
Scwf._[_] domScwf     = _‚àò_
Scwf.id domScwf       = idMap
Scwf._‚àò_ domScwf      = _‚àò_
Scwf.‚ü®‚ü© domScwf       = emptyMap
Scwf.‚ü®_,_‚ü© domScwf    = ‚ü®_,_‚ü©
Scwf.p domScwf        = p
Scwf.idL domScwf      = idL
Scwf.idR domScwf      = idR
Scwf.subAssoc domScwf = subAssoc
Scwf.idSub domScwf    = idSub
Scwf.compSub domScwf  = compSub
Scwf.id‚ÇÄ domScwf      = id‚ÇÄ
Scwf.<>-zero domScwf  = <>-zero
Scwf.pCons domScwf    = pCons
Scwf.qCons domScwf    = qCons
Scwf.idExt domScwf    = idExt
Scwf.compExt domScwf  = compExt
Scwf.subCong domScwf  = ‚àò-cong
Scwf.<,>-cong domScwf = <,>-cong
Scwf.‚àò-cong domScwf   = ‚àò-cong
